# app/routers/auth.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from app.database import get_db
from app.models import Usuario, Obra
from app.schemas import LoginRequest, UsuarioResponse
from passlib.context import CryptContext

router = APIRouter(
    prefix="/auth",
    tags=["Autentica√ß√£o"]
)

# Configura√ß√£o do Passlib para seguran√ßa de senhas
pwd_context = CryptContext(schemes=["argon2"], deprecated="auto")


def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)


# ‚úÖ Login de Usu√°rio
@router.post("/login", response_model=UsuarioResponse)
def login(login_request: LoginRequest, db: Session = Depends(get_db)):
    print("Recebido:", login_request.username, login_request.password)

    # üîπ Buscar usu√°rio pelo e-mail (ou nome se preferir)
    user = db.query(Usuario).filter(Usuario.email == login_request.username).first()
    
    if not user:
        print("Usu√°rio n√£o encontrado no banco")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Usu√°rio ou senha inv√°lidos"
        )

    print("Encontrou user:", user.nome, user.senha_hash)
    
    # üîπ Verificar senha com hash
    if not verify_password(login_request.password, user.senha_hash):
        print("Senha inv√°lida ao verificar o hash")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Usu√°rio ou senha inv√°lidos"
        )
    
    print(f"Usu√°rio autenticado com sucesso! Obra associada: {user.codigo_projeto}")


    # üîπ Retorno do usu√°rio autenticado
    return UsuarioResponse(
        id=user.id,
        nome=user.nome,
        email=user.email,
        cargo=user.cargo,
        codigo_projeto=user.codigo_projeto,  # ‚úÖ Agora incluso no retorno
        ativo=user.ativo
    )
